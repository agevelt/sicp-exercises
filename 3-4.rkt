#lang racket

(define (make-account balance password)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (call-the-cops)
    (lambda (x) "Open up! FBI!"))

  (define (password-check password-retry-limit)
    (let ((password-attempts 0))
      (lambda (password-input continuation)
        (if (eq? password-input password)
            (begin (set! password-attempts 0)
                   continuation)
            (begin (set! password-attempts (add1 password-attempts))
                   (if (<= password-attempts password-retry-limit)
                       (lambda (x) "Incorrect password")
                       (call-the-cops)))))))
                   
  (define (dispatch m)
      (cond ((eq? m 'withdraw) withdraw)
            ((eq? m 'deposit) deposit)
            (else (error "Unknown request -- MAKE-ACCOUNT"))))
  
  (let ((pw-check (password-check 7)))
    (lambda (password-input method) (pw-check password-input (dispatch method)))))

(define a (make-account 100 'abc))
((a 'abc 'withdraw) 1)
((a 'xyz 'withdraw) 1)
((a 'abc 'withdraw) 1)
((a 'xyz 'withdraw) 1)
;> Incorrect password
((a 'xyz 'withdraw) 1)
((a 'xyz 'withdraw) 1)
((a 'xyz 'withdraw) 1)
((a 'xyz 'withdraw) 1)
((a 'xyz 'withdraw) 1)
((a 'xyz 'withdraw) 1)
((a 'xyz 'withdraw) 1)
;> Open up! FBI!
((a 'xyz 'withdraw) 1)
((a 'xyz 'withdraw) 1)
((a 'xyz 'withdraw) 1)